<iframe
  width="600"
  height="400"
  seamless
  frameBorder="0"
  scrolling="no"
  src="http://localhost:8088/superset/explore/?form_data=%7B%22datasource%22%3A%2216__table%22%2C%22viz_type%22%3A%22table%22%2C%22slice_id%22%3A46%2C%22granularity_sqla%22%3Anull%2C%22time_grain_sqla%22%3Anull%2C%22since%22%3A%227+days+ago%22%2C%22until%22%3A%22now%22%2C%22groupby%22%3A%5B%22tag_name%22%5D%2C%22metrics%22%3A%5B%7B%22expressionType%22%3A%22SIMPLE%22%2C%22column%22%3A%7B%22filterable%22%3Atrue%2C%22expression%22%3A%22%22%2C%22description%22%3Anull%2C%22column_name%22%3A%22question_id%22%2C%22is_dttm%22%3Afalse%2C%22groupby%22%3Atrue%2C%22optionName%22%3A%22_col_question_id%22%2C%22type%22%3A%22INTEGER%22%2C%22verbose_name%22%3Anull%7D%2C%22aggregate%22%3A%22COUNT_DISTINCT%22%2C%22hasCustomLabel%22%3Afalse%2C%22optionName%22%3A%22metric_ynvxijwnat_h7xna6e4zv%22%2C%22label%22%3A%22COUNT_DISTINCT%28question_id%29%22%2C%22sqlExpression%22%3Anull%2C%22fromFormData%22%3Atrue%7D%5D%2C%22timeseries_limit_metric%22%3Anull%2C%22row_limit%22%3A10000%2C%22include_time%22%3Afalse%2C%22order_desc%22%3Atrue%2C%22all_columns%22%3A%5B%5D%2C%22order_by_cols%22%3A%5B%5D%2C%22table_timestamp_format%22%3A%22%25Y-%25m-%25d+%25H%3A%25M%3A%25S%22%2C%22page_length%22%3A0%2C%22include_search%22%3Afalse%2C%22table_filter%22%3Afalse%2C%22align_pn%22%3Afalse%2C%22color_pn%22%3Atrue%2C%22where%22%3A%22%22%2C%22having%22%3A%22%22%2C%22filters%22%3A%5B%5D%2C%22url_params%22%3A%7B%7D%7D&standalone=true&height=400"
>
</iframe>


class RemoteUserMiddleware(object):
    def __init__(self, app):
        self.app = app
    def __call__(self, environ, start_response):
        user = environ.pop('HTTP_X_PROXY_REMOTE_USER', None)
        print("******** Remote user is", user)
        environ['REMOTE_USER'] = user
        return self.app(environ, start_response)

ADDITIONAL_MIDDLEWARE = [RemoteUserMiddleware, ]

docker run --detach --name superset -p "8088:8088" -v $(pwd)/config:/etc/superset -v $(pwd)/data:/var/lib/superset amancevice/superset

docker run -it -v $(pwd)/config:/etc/superset -v $(pwd)/data-2:/var/lib/superset -p 8088:6000 --entrypoint sh --user root amancevice/superset:0.23.3


------
# Import some libraries that are required
from flask_appbuilder.security.views import expose
from flask_appbuilder.security.sqla.manager import SecurityManager
from flask_appbuilder.security.manager import BaseSecurityManager
from flask_appbuilder.security.manager import AUTH_REMOTE_USER

# Create a custom view to authenticate the user
AuthRemoteUserView=BaseSecurityManager.authremoteuserview
class AirbnbAuthRemoteUserView(AuthRemoteUserView):
    @expose('/login/')
    def login(self):
      print("This is LOGIN")
      return ("This is the response from your custom authenticator")


# Create a custom Security manager that override the authremoteuserview with the one I've created
class CustomSecurityManager(SecurityManager):
    authremoteuserview = AirbnbAuthRemoteUserView

# Use my custom authenticator
CUSTOM_SECURITY_MANAGER = CustomSecurityManager
------


From Flask - security/views.py
--
class AuthRemoteUserView(AuthView):
    login_template = ''

    @expose('/login/')
    def login(self):
        username = request.environ.get('REMOTE_USER')
        if g.user is not None and g.user.is_authenticated():
            return redirect(self.appbuilder.get_url_for_index)
        if username:
            user = self.appbuilder.sm.auth_user_remote_user(username)
            if user is None:
                flash(as_unicode(self.invalid_login_message), 'warning')
            else:
                login_user(user)
        else:
            flash(as_unicode(self.invalid_login_message), 'warning')
        return redirect(self.appbuilder.get_url_for_index)

--

AUTH_TYPE = AUTH_REMOTE_USER
AUTH_USER_REGISTRATION = True
